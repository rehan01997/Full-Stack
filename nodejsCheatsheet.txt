npmjs.com
date-fns
rfxs 
node --version
npm init -y

*** cpx ***
    npm i cpx           tool for copying files
    npm i --save-dev cpx

    // copy css files to folder public/external
    "scripts": {
        "test": "echo \"Error: no test specified\" && exit 1",
        "nodeversion":"node-version",
        "copy":"cpx \"node_modules/normalize.css/*.css\" public/external"
    },

*** live server ***
    npm i live-server       search another command

    "scripts": {
        "start": "live-server --open=public --entry-file=index.html"
    },

cmd : npm start


function myFunction() {
    document.getElementById("container").classList.toggle("show");
    // document.getElementById("myDropdown").classList.toggle("show");
}
window.onclick = function(event) {
    if (!event.target.matches('#container') && !event.target.matches('.input-button')) {
        var dropdowns = document.getElementsByClassName("dropdown-content ");
        var i;
        for (i = 0; i < dropdowns.length; i++) {
            var openDropdown = dropdowns[i];
            if (openDropdown.classList.contains('show')) {
                openDropdown.classList.remove('show');
            }
        }
    }
}
function collapse()
{
    var coll = document.getElementsByClassName("collapsible");
    var i;

    for (i = 0; i < coll.length; i++) {
        coll[i].addEventListener("click", function() {
            var content = this.nextElementSibling;
            if (content.style.display === "block") {
                content.style.display = "none";
            } else {
                content.style.display = "block";
            }
        });
    }
}
</script>

    .hide-flex-item{
        display : flex;
    }
 document.querySelector( '.navbar-toggle' ).onclick = function() {
                const toggleableMenus = document.querySelectorAll( '.nav-toggleable-menu' );

                for( let i = 0; i < toggleableMenus.length; i++ ) {
                    toggleableMenus[i].classList.toggle( 'hide-flex-item-on-mobile' );
                }
            };

*** Call/apply keyword as with as parameter ***         // apply is more powerfull
    function foo() {
        console.log( this );
    }

    // calls foo function - we can set the context ("this")
    foo.call({
        name : 'John',
        age: 32
    }); // this -> { name : 'John', age: 32 }

*** Bind ***
    function foo( x, y, z ) {
        console.log( 'this = ', this );
        return this.a + x + y + z;
    }

    const boundFoo = foo.bind( { a : 1 } );
    console.log( boundFoo( 1, 2, 3 ) ); // foo.call( { x : 1 }, 1, 2, 3 ); // 7

    // You can pass null as first argument to bind() if you do not want to change the context
    const boundFoo2 = foo.bind( { a: 100 }, 1, 2 );
    console.log( boundFoo2( 3 ) ); // foo.call( { x : 100 }, 1, 2, 3 ); // 106
    console.log( boundFoo2( 4 ) ); // 107
    console.log( boundFoo2( 5 ) ); // 108

*** Constructor ***         // prototype , new 
    function Person( name, age ) {
        console.log( this );
        this.name = name;
        this.age = age;
    }

    // objects created using Person can use methods defined on Person.prototype
    Person.prototype.celebrateBirthday = function() {
        this.age++;
    };

    const john = new Person( 'John', 32 ); // runtime creates an empty object - { }, this -> { }
    john.celebrateBirthday();
    console.log( john );

*** substr and substring ***
    substr( idx , length );
    substr( from_idx , to_idx );

*** includes and indexof *** 
    console.log( quote.includes( 'great', 10 ) ); // true       // word , from-idx
    // console.log( quote.indexOf( 'great' ))
    console.log( quote.indexOf( 'great', 10 ) );    // index of word after idx 10

*** Math max ***        //does not work with string 
     Math.max.apply( null, numbers )

*** Validate Form ***

<body>
        <!--
            'submit' event fires on the form having the submit button
        -->
        <form action="success.html">
            <span class="error-message"></span>
            <div class="form-group">
                <input type="text" placeholder="first name" />
                <span class="error-message"></span>
            </div>
            <div class="form-group">
                <input type="text" placeholder="middle name" />
                <span class="error-message"></span>
            </div>
            <div class="form-group">
                <input type="text" placeholder="last name" />
                <span class="error-message"></span>
            </div>
            <div class="form-group">
                <input type="email" placeholder="email" />
                <span class="error-message"></span>
            </div>
            <div class="form-group">
                <!--
                    'click' event fires on submit button
                -->
                <input type="submit" value="Submit" />
            </div>
        </form>
    
        <script>
            const input = document.querySelector( 'input' );
            const inputs = document.querySelectorAll( 'input[type="text"]' );
            const email = document.querySelector( 'input[type="email"]' );
            const form = document.querySelector( 'form' );

            function validateInput() {
                const errorMessageEl = this.closest( '.form-group' ).querySelector( '.error-message' );
                let isValid = true;

                if( this.value.trim() === '' ) {
                    // this.nextElementSibling
                    // this.parentNode

                    // closest() keeps going up the DOM hierarchy (parent -> grandparent -> ...) till a match for provided CSS selector is found
                    errorMessageEl.innerHTML = 'This field is required';
                    isValid = false;
                } else {
                    errorMessageEl.innerHTML = '';
                    isValid = true;
                }

                return isValid;
            }

            function validateEmail() {
                const errorMessageEl = this.closest( '.form-group' ).querySelector( '.error-message' );
                let isValid = true;

                if( this.value.trim() === '' ) {
                    errorMessageEl.innerHTML = 'This field is required';
                    isValid = false;
                } else if( !( /[A-Za-z_\.]+@gmail\.com/.test( this.value.trim() ) ) ) {
                    errorMessageEl.innerHTML = 'Only GMail id is allowed';
                    isValid = false;
                } else{
                    errorMessageEl.innerHTML = '';
                    isValid = true;
                }

                return isValid;
            }

            for( let i = 0; i < inputs.length; i++ ) {
                inputs[i].addEventListener( 'blur', validateInput );
                inputs[i].addEventListener( 'input', validateInput );
                email.addEventListener( 'blur', validateEmail );
                email.addEventListener( 'input', validateEmail );
            }

            form.addEventListener( 'submit', function( event ) {
                let isValid = true;

                isValid = isValid && validateInput.call( inputs[0] );
                isValid = isValid && validateInput.call( inputs[1] );
                isValid = isValid && validateInput.call( inputs[2] );
                isValid = isValid && validateEmail.call( email );

                if( !isValid ) {
                    this.querySelector( '.error-message' ).innerHTML = 'Some of the inputs have errors. Please correct them and try submitting again.';
                    event.preventDefault();
                }
            });
        </script>   

*** AJAX AXIOS ***  download AXIOS.js

    Ajax : Asynchronous JavaScript and XML
    Aside: Better called Ajaj - Asynchronous JavaScript and JSON

    <script>
            (function() {
                function addWorkshop( workshop ) {
                    const gallery = document.querySelector('.gallery');

                    const div = document.createElement('div');
                    div.classList.add('gallery-item');

                    div.innerHTML = `
                        <h2>${workshop.name}</h2>
                        <div>${workshop.description}</div>
                    `;

                    gallery.appendChild(div);
                }

                function showMessage( message ) {
                    document.querySelector( '.message' ).textContent = message;
                    document.querySelector( '.message' ).style.display = 'block';
                }

                function hideMessage() {
                    document.querySelector( '.message' ).style.display = 'none';
                }
                
                // fetch( 'https://workshops-server.herokuapp.com/workshops' )

                // 4 Main HTTP request methods
                // axios.get()
                // axios.post()
                // axios.put()
                // axios.delete()

                // axios.get() returns a "Promise" object (a JS built-in class)
                // On promises we have the methods - then(), catch()
                // axios.get() is an async function

                // promise.then( () => {} ) -> Hey promise, when you go into resolved state, please call this function I am passing to you
                // promise.catch( () => {} ) -> Hey promise, when you go into rejected state, please call this function I am passing to you

                (function init() {
                    showMessage( `Workshops are being fetched. Hang on!` );

                    axios.get( `https://workshops-server.herokuapp.com/workshops` )
                        .then(( response ) => {
                            hideMessage();

                            const workshops = response.data;
                            workshops.forEach( addWorkshop );
                        })
                        .catch(( error ) => {
                            showMessage( error.message );
                        });
                }());
            }());
        </script>

*** toggle ***
    <script>
          function collapse(x,y){
              const header = document.getElementById(x).addEventListener('click',function(){
                    document.getElementById(y).classList.toggle('show');
              });
          }
          document.getElementById('headingOne').addEventListener('click',collapse('headingOne','collapseOne'));
          document.getElementById('headingTwo').addEventListener('click',collapse('headingTwo','collapseTwo'));
          document.getElementById('headingThree').addEventListener('click',collapse('headingThree','collapseThree'));
      </script>

*** AJAX ***
<div id="demo"></div>
    <script>
        var xhttp = new XMLHttpRequest();
        const divDemo = document.querySelector('#demo');
        function printAll(x)
        {
            x.forEach(element => {
                const div = document.createElement('div');
                div.classList.add('demo-item');
                div.innerHTML = `<h4>${element.title}</h4>    <p>User ID : ${element.userId}  ,  ID : ${element.id}  ,  Is Completed : ${element.completed}</p>`;
                divDemo.appendChild(div);
            });
        }
        xhttp.onreadystatechange = function() {
            if (this.readyState == 4 && this.status == 200) {
                // document.getElementById("demo").innerHTML =
                // this.responseText;                
                var obj = JSON.parse(this.response);
                printAll(obj);
                console.log(obj);
            }
        };
        xhttp.open("GET", "https://jsonplaceholder.typicode.com/todos", true);
        xhttp.send();
    </script>

*** Deep Copy ***
const john = {
    name: 'John',
    age: 32,
    emails: [
        'john@gmail.com',
        'john@example.com'
    ],
    address: {
        city: 'Bangalore',
        pinCode: 560100,
        region: 'Electronic City'
    }
};

const johnCopy = {      //changes in john also
    ...john // name: john.name, age: john.age, emails: john.emails, address: john.address
};

johnCopy.age++; // does not affect john.age
johnCopy.emails.push( 'john@yahoo.com' ); // also affects john.emails       //changes in john also
johnCopy.address.city = 'Hyderabad'; // also affects john.address           //changes in john also

console.log( johnCopy );
console.log( john );

console.log("*******************");
// EXERCISE: Create a "deep copy" -> the copy should have its own array and object for emails and address (respectively)
const johnDeepCopy = {      //doesnot change in john
    ...john, // name: john.name, age: john.age, emails: john.emails, address: john.address
    // name: 'Jonathan'
    emails: [
        ...john.emails // john.emails[0], john.emails[1] -> both primitives
    ],
    address: {
        ...john.address
    }
};            
johnDeepCopy.age++;
johnDeepCopy.emails.push( 'john@microsoft.com' );                // No changes in john
johnDeepCopy.address.city = 'Mumbai';                            //No changes in john

*** class **
class Person {
    // They belong to the class and not objects
    static sayHello() {
        console.log( 'Hello' );
    }

    static defaults = {
        age: 18,
        nationality: 'Indian'
    };

    constructor( name, age = Person.defaults.age, nationality = Person.defaults.nationality ) { // this -> {}
        this.name = name;
        this.age = age;
        this.nationality = nationality;

        // return this;
    }

    celebrateBirthday() { // context ("this") is the calling object
        this.age++;
        // Person.sayHello();
    }
}

*** Callback ***
    A callback is a function passed as an argument to another function
    This technique allows a function to call another function
    A callback function can run after another function has finished.

    function sum( x, y, callback ) {
        setTimeout(function() {
        callback( x + y );
        }, 2000);
    }

    // EXERCISE: Use sum function to calculate sum of 12, 13. Once the result is obtained, use sum again to calculate sum of the result and 14. Then calculate the sum of the previous result and 15, and finally print the final sum.
    // callback hell (christmas tree)
    sum( 12, 13, function( result1 ) {
        console.log( 'result1 = ', result1 );

        sum( result1, 14, function( result2 ) {
            console.log( 'result2 = ', result2 );

            sum( result2, 15, function( result3 ) {
                console.log( 'result3 = ', result3 );
            });
        });
    });

*** Promise ***
    function sum( x, y ) {
        // the Promise class constructor, calls the function passed to it immediately
        // initially the Promise object is in "unfulfilled" state
        // when resolve( value ) is called, the promise moves into a "resolved" state (the promise has resolved with the value passed)
        // when reject( reason ) is called, the promise moves into a "rejected" state
        return new Promise(( resolve, reject ) => {
            if( typeof x !== 'number' || typeof y !== 'number' ) {
                reject( new Error( 'at least one argument was not a number' ) );
                return;
            }

            setTimeout(() => {
                const result = x + y;
                resolve( result );
            }, 2000);
        });
    }

    const promise = sum( 12, 'hello' );

    // The Promise object has 2 important methods - then(), and catch()
    // the function we pass to then() is executed when promise is resolved
    promise.then(( result ) => {
        console.log( 'result = ', result );
    });

    // the function we pass to then() is executed when promise is rejected
    promise.catch(( error ) => {
        console.log( 'error = ', error.message );
    });

*** promise.all ***
    // axios is async promise

    const { default: axios } = require("axios");

    function getWorkhopDetailsAndSession(id) {
        
        let p1 = axios.get(`http://workshops-server.herokuapp.com/workshops/${id}`)
                .then(response =>{
                    return response.data;
                }).catch( x => {
                    console.log("error");
                });
        let p2 = axios.get(`http://workshops-server.herokuapp.com/workshops/${id}/sessions`)
                .then(response =>{
                    return response.data;
                }).catch( x => {
                    console.log("Erro");
                });

        Promise.all([p1,p2]).then( values => {
            console.log(values);
        });
    }

    getWorkhopDetailsAndSession(1);

*** Local Storage ==>   web browser  ***
    localStorage.setItem('name' , 'rehan');
    localStorage.getItem('name' , 'rehan');
    localStorage.removeItem('name' , 'rehan');

####   NODE JS ######
*** Create Server ****
    const http = require( 'http' ); // require can be called anywhere
    // import http from 'http';

    // the function passed is called when there is an incoming HTTP request
    const server = http.createServer(( req, res ) => {
        res.write( 'Hello, world! ' );
        res.write( 'How are you? ' );

        // We MUST end the request
        // ends the response -> we cannot write() after end()
        res.end( 'Bye for now...' );

        // error
        // res.write( 'Writing after ending the response' );
    });

    // starts the server on port 3000
    server.listen( 3000 );

*** Another way create server ***
    const http = require( 'http' );

    const server = http.createServer( /* handler for 'request' event is added later */ );

    // you can read environment variables - you cannot set
    const PORT = process.env.PORT || 3000;

    // server.listen() is an async function
    server.listen( PORT );

    // server is an "event emitter"
    // server.addListener / server.on

    // event 'request' is fired when HTTP request comes in (from browser)
    server.on( 'request', ( req, res ) => {
        res.end( 'Hello' );
    });

    // event 'listening' fires after server starts listening
    // once will remove the event handler function after the event occurs first time, and the function executes
    server.once( 'listening', () => {
        console.log( `Check http://localhost:${PORT}` )
    });

    // 'error' event is a special event (EventEmitter objects treat 'error' event specially)
    server.on( 'error', ( error ) => {
        console.error( error.message );
    });

*** server - http url ***
    const http = require( 'http' );
    const url = require( 'url' );

    const server = http.createServer(( req /* IncomingMessage */, res /* ServerResponse */ ) => {
        console.log( req.url );

        // If we pass true -> it parses the query string (else it does not)
        const urlParts = url.parse( req.url, true );
        console.log( urlParts );
        
        for( let key in urlParts.query ) {
            res.write( `You sent ${key} with value ${urlParts.query[key]}\n` );
        }
        res.end( 'The pathname is ' + urlParts.pathname );
    });

    const PORT = process.env.PORT || 3000;

    server.listen( PORT );

    server.once( 'listening', () => {
        console.log( `Check http://localhost:${PORT}` )
    });

    server.on( 'error', ( error ) => {
        console.Error
    
*** set the url ***
    if( urlParts.pathname === '/home' ) {
            // we need to redirect
            // 3xx - redirect request
            // For Permanent moved redirection, we use 301

            // The browser will make a fresh request to '/' when it receives a redirect response
        res.statusCode = 301;
        res.setHeader( 'Location', '/' );
        res.end();
        return;
    }

*** file system read ***
    const fs = require( 'fs' );
    const path = require( 'path' );

    console.log( __dirname );
    console.log( __filename );

                // __dirname, __filename
    const referenceFilePath = path.join( __dirname, 'references.md' );

                // readFile() is an async function (the callback does not immediately execute)
    fs.readFile( referenceFilePath, ( error, contents ) => {
        if( error ) {
            console.error( error.message );
            return;
        }

                // contents is a buffer object
        console.log( contents.toString( 'utf8' ) );
    });

    console.log( 'end of script' );
            OR 
    const contents = fs.readFileSync( referenceFilePath, 'utf-8' );

*** Methods **
    const server = http.createServer(( req, res ) => {
    const urlParts = url.parse( req.url, true );
    const method = req.method.toLowerCase();

    // home page request
    if( method === 'get'  && urlParts.pathname === '/' ) {
        fs.readFile( path.join( __dirname, '01-handling-post-request.html' ), 'utf-8', ( error, contents ) => {
            if( error ) {
                res.statusCode = 500;
                res.end( 'Some error' );
                return;
            }
            
            res.end( contents );
        });
    }

    // POST form
    if( method === 'post' && urlParts.pathname === '/shorturls' ) {
        let buffer = '';

        req.on( 'data', chunk => {
            buffer += chunk;
        });

        req.on( 'end', () => {
            // buffer will be data posted form form (URL encoded format - key=value&key=value&...)
            console.log( buffer );
            
            const parsedData = querystring.parse( buffer );
            console.log( parsedData );

            res.end( 'URL noted and short url shall be generated' );
        });
    }
});

*** Write file ****
    fs.writeFileSync( path.join( __dirname, 'hello.txt' ), 'Hello, world', { encoding: 'utf8', flag: 'a' } );   //
    fs.writeFile( path.join( __dirname, 'hello.txt' ), 'Hello, world', { encoding: 'utf8', flag: 'a' }, error => {
        if( error ) {
            console.error( `Some error occured` );
            console.error( error.message );
            return;
        }
    });

*** Append File ***
    fs.appendFile( path.join( __dirname, 'hello.txt' ), 'Hello, world', { encoding: 'utf8' }, error => {
        if( error ) {
            console.error( `Some error occured` );
            console.error( error.message );
            return;
        }
    });

**** Read Dir ***
    const path = __dirname;
    fs.readdir(path, (err, files) => {
        if( err ) {
            console.error( error.message );
            return;
        }
        files.forEach(file => {
            console.log(file);
        });
    });

**** Read read file stream -- Big file ****
    const rs = fs.createReadStream( bigFilePath, { encoding: 'utf-8', highWaterMark: 32 * 1024 } );
    let count = 1;
            // When the reading starts, and a chunk of data has been read, call the callback function
    rs.on( 'data', chunk => {
        console.log( 'chunk ' + count );
        count++;
                // console.log( chunk.toString( 'utf8' ).substr( 0, 100 ) );
        console.log( chunk.substr( 0, 100 ) );
    });
            // When the reading starts, and a chunk of data has been read, call the callback function
    rs.on( 'end', () => {
        console.log( 'file has been read' );
    });
            // start reading
    rs.read();

*** Write File stream ***
    const ws = fs.createWriteStream( path.join( __dirname, 'hello.txt' ), { encoding: 'utf-8', flags: 'a' } );
    ws.write( 'World' );
    ws.end();

*** Copy file from src to dest ***
    const src_path = path.join(__dirname, 'hello.txt');
    const dest_path = path.join(__dirname, 'hello_copy.txt');

    rs = fs.createReadStream(src_path, {encoding: 'utf-8'});
    ws = fs.createWriteStream(dest_path, {encoding: 'utf-8'});

    rs.on('data', chunk=>{
        ws.write(chunk);
    })

    rs.on('end',()=>{
        ws.end();
        console.log('File copied successfully');
    })

    rs.read()

*** Copy file from src to dest --- another way ***
    rs = fs.createReadStream(src_path, {encoding: 'utf-8'});
    ws = fs.createWriteStream(dest_path, {encoding: 'utf-8'});

    rs.pipe( ws );

*** Serving data from file to server ****
    const src_file = path.join(__dirname, 'hello.txt');
    const server = http.createServer((req, res)=>{
        const rs = fs.createReadStream(src_file,{encoding: 'utf-8'} )
        rs.pipe(res);
    });
    server.listen(3000);

**** Capturing data from server using pipe****
    const server = http.createServer( ( req,res )=>{
        const ws = fs.createWriteStream( srcPath ,{encoding: 'utf8', flags: 'a' });
        req.pipe(ws);

        res.end( 'Your details have been captured' );
    })

    server.listen(4000);