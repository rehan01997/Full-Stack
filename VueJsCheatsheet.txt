www.webpack.js.org  --- bundle your scritp
cli.vuejs.org       --- same bundlww yputr script

install extension vetur
1) install cli  ---> npm i -g @vue/cli
2) vue create workshop-app
3) npm run serve
4) bootstrap -- npm i bootstrap@4
*** mount *** 

    <div id="app">
        Message = {{message}}
        <template v-if="newMessage !== ''">
            New message = {{newMessage}}
        </template>
        <button @click="changeMessage">Change message</button>
    </div>

    <script type="module">
        import Vue from 'https://cdnjs.cloudflare.com/ajax/libs/vue/2.6.12/vue.esm.browser.min.js';

        const rootInstanceData = {
            message: 'Hello, Vue',
            newMessage: ''
        };

        // root instance -> tie up the Vue instance to the UI
        // i) Provide el
        // ii) "mount" it on an HTML element
        const vm = new Vue({
            // Vue creates a accessor method for every property in data object
            data: rootInstanceData,
            methods: {
                changeMessage() {
                    // "data-binding" helps change UI when data changes
                    // data-binding is seamless in Vue.js
                    // Vue "reacts" to changes in data seamlessly
                    this.message = 'Hello, Vue JS';
                    this.newMessage = 'New message';
                }
            }
        });
        
        vm.$mount( '#app' );
        console.log( vm );

        setTimeout(() => {
            vm.message = 'Hello, Vue root instance';
        }, 5000);      

        setTimeout(() => {
            console.log( rootInstanceData );
        }, 6000);
    </script>

*** template *** 

    <div id="app"></div>
    <script type="module">
    import Vue from 'https://cdnjs.cloudflare.com/ajax/libs/vue/2.6.12/vue.esm.browser.min.js';

    new Vue({
        data: {
            message: 'Hello Vue template'
        },
        el: '#app',
        template: `
            <div id="app">
                <div>{{message}}</div>
            </div>
        `
    });
    </script>

*** v-html ***

    <div id="app"></div>
    <script type="module">
    import Vue from 'https://cdnjs.cloudflare.com/ajax/libs/vue/2.6.12/vue.esm.browser.min.js';

    new Vue({
        data: {
            description: "<p><strong>AngularJS</strong> (also written as <strong>Angular.js</strong>) is a JavaScript-based open-source front-end web application framework mainly maintained by Google and by a community of individuals and corporations to address many of the challenges encountered in developing single-page applications.</p><p>It aims to simplify both the development and the testing of such applications by providing a framework for client-side model–view–controller (MVC) and model–view–viewmodel (MVVM) architectures, along with components commonly used in rich Internet applications. (This flexibility has led to the acronym MVW, which stands for \"model-view-whatever\" and may also encompass model–view–presenter and model–view–adapter.)</p>"
        },
        el: '#app',
        template: `
            <div id="app">
                <!--
                    v-html is a "directive" 
                    Directives add functionality to the "host element"
                -->
                <div v-html="description"></div>
            </div>
        `
    });
    </script>

*** v-bind / : ***
<div id="app"></div>

<script type="module">
    import Vue from 'https://cdnjs.cloudflare.com/ajax/libs/vue/2.6.12/vue.esm.browser.min.js';

    new Vue({
        el: '#app',
        data: {
            imageUrl: "https://upload.wikimedia.org/wikipedia/commons/thumb/c/ca/AngularJS_logo.svg/2000px-AngularJS_logo.svg.png",
            name: 'Angular',
            date: 'May 15',
            source: 'src'
        },
        template: `
            <img
                :[source]="imageUrl"
                :alt="name + '(' + date + ')'"
                width="100" />
        `
    });
</script>

*** v-if ***
v-if hides and shows by adding / removing from DOM
v-if does not construct the DOM at the start if showPanelBody is false
Use v-if if you want to save on initial rendering time when there is a huge element that is conditionally rendered
v-if results is slower switches from hidden to shown and vice versa
-->
    <div id="app">
    <div class="panel">
        <div class="panel-heading" @click="togglePanel">What is Vue?</div>
        <div class="panel-body" v-if="showPanelBody">It is a frontend library for building UI</div>
    </div>
    </div>

    <script type="module">
    import Vue from 'https://cdnjs.cloudflare.com/ajax/libs/vue/2.6.12/vue.esm.browser.min.js';

    new Vue({
        data: {
            showPanelBody: false
        },
        methods: {
            togglePanel() {
                this.showPanelBody = !this.showPanelBody;
            }
        }
    }).$mount( '#app' );
    </script>

*** v-show ***
<!-- 
v-show hides and shows through CSS display value
v-show constructs the panel body at the start irrespective of whether the element is to be shown or hidden
v-show results is faster switches from hidden to shown and vice versa
-->
<div id="app">
<div class="panel">
    <div class="panel-heading">What is Vue?</div>
    <div class="panel-body" v-show="showPanelBody">It is a frontend library for building UI</div>
</div>
</div>

<script type="module">
import Vue from 'https://cdnjs.cloudflare.com/ajax/libs/vue/2.6.12/vue.esm.browser.min.js';

new Vue({
    data: {
        showPanelBody: false
    }
}).$mount( '#app' );
</script>

*** v-if / v-else-if / v-else  ***
    <div id="app">
    <template v-if="city === 'Chennai'">
        <p>Beach</p>
        <p>Mahabalipuram</p>
    </template>
    <template v-else-if="city === 'Bangalore'">
        <p>Lalbagh</p>
        <p>Cubbon Park</p>
    </template>
    <template v-else>
        <p>India Gate</p>
        <p>Connaught Place</p>
    </template>

    <button @click="switchCity( 'Chennai' )">Chennai</button>
    <button @click="switchCity( 'Bangalore' )">Bangalore</button>
    <button @click="switchCity( 'Delhi' )">Delhi</button>
    </div>

    <script type="module">
    import Vue from 'https://cdnjs.cloudflare.com/ajax/libs/vue/2.6.12/vue.esm.browser.min.js';

    new Vue({
        data: {
            city: 'Chennai'
        },
        methods: {
            switchCity( city ) {
                this.city = city;
            }
        }
    }).$mount( '#app' );
    </script>

*** V-model ***
    <div id="app">
        <form @submit.prevent="login">
            <h2>Login</h2>
            <!--
                v-model can be used on input, textarea, select
                v-model does 2-way data binding
                    - data flows from view-model to the UI
                    - user input will flow back to view-model (i.e. data)
                        - 'input' event for input, 'change' event for select
                view-model data becomes "single source of truth" for user inputs
            -->
            <div>
                <label for="email">Email</label>
                <input type="email" v-model="credentials.email" />
                {{credentials.email}}
            </div>
            <div>
                <label for="password">Password</label>
                <input type="password" v-model="credentials.password" />
                <!-- {{credentials.password}} -->
            </div>
            <div>
                <input type="submit" />
            </div>
        </form>
    </div>

    <script type="module">
        import Vue from 'https://cdnjs.cloudflare.com/ajax/libs/vue/2.6.12/vue.esm.browser.min.js';

        new Vue({
            data: {
                credentials: {
                    email: 'john@example.com',
                    password: ''
                }
            },
            methods: {
                login() {
                    this.credentials.email = '';
                    this.credentials.password = '';
                }
            }
        }).$mount( '#app' );
    </script>

*** v-on: ***
    <div id="app">
        <form v-on:submit="login( $event )">
            <h2>Login</h2>
            <div>
                <label for="email">Email</label>
                <input type="email" v-model="credentials.email" />
                {{credentials.email}}
            </div>
            <div>
                <label for="password">Password</label>
                <input type="password" v-model="credentials.password" />
                <!-- {{credentials.password}} -->
            </div>
            <div>
                <input type="submit" />
            </div>
        </form>
    </div>

    <script type="module">
        import Vue from 'https://cdnjs.cloudflare.com/ajax/libs/vue/2.6.12/vue.esm.browser.min.js';

        new Vue({
            data: {
                credentials: {
                    email: 'john@example.com',
                    password: ''
                }
            },
            methods: {
                login( event ) {
                    event.preventDefault();

                    this.credentials.email = '';
                    this.credentials.password = '';
                }
            }
        }).$mount( '#app' );
    </script>

*** To remove selected city ***
 <li v-for="city in cities" :key="city">{{city}}</li>
            </ul>
            <select v-model="selectedCity">
                <option value=""></option>
                <option v-for="city in cities" :key="city" :value="city">{{city}}</option>
            </select>
            You selected {{selectedCity}}
            <div>
                <button @click="removeCity">Remove selected city</button>
            </div>
        </div>

        <script type="module">
            import Vue from 'https://cdnjs.cloudflare.com/ajax/libs/vue/2.6.12/vue.esm.browser.min.js';

            new Vue({
                data: {
                    selectedCity: '',
                    cities: [
                        'Chennai',
                        'Mumbai',
                        'Kolkata',
                        'Delhi'
                    ]
                },
                methods: {
                    removeCity() {
                        this.cities = this.cities.filter(city => {
                            return city !== this.selectedCity
                        });

                        this.selectedCity = '';
                    }
                }
            }).$mount( '#app' );
        </script>

*** capturing and Bubbling ***
    Bubbling : When an event happens on an element, it first runs the handlers on it, then on its parent, then all the way up on other ancestors.
    capturing : top -down ( top to final button clicked )
            to stop propagation : event.stopImmediatePropagation()
       
        <form>FORM
        <div>DIV
        <p>P</p>
        </div>
        </form>

        <script>
        for(let elem of document.querySelectorAll('*')) {
        elem.addEventListener("click", e => alert(`Capturing: ${elem.tagName}`), true);
        elem.addEventListener("click", e => alert(`Bubbling: ${elem.tagName}`));
        }
        </script>

*** Event Modifiers ***
https://vuejs.org/v2/guide/events.html#Event-Modifiers

    It is a very common need to call event.preventDefault() or event.stopPropagation() inside event handlers. Although we can do this easily inside methods, it would be better if the methods can be purely about data logic rather than having to deal with DOM event details.

    .stop
    .prevent
    .capture
    .self
    .once
    .passive
    <!-- the click event's propagation will be stopped -->
    <a v-on:click.stop="doThis"></a>

    <!-- the submit event will no longer reload the page -->
    <form v-on:submit.prevent="onSubmit"></form>

    <!-- modifiers can be chained -->
    <a v-on:click.stop.prevent="doThat"></a>

    <!-- just the modifier -->
    <form v-on:submit.prevent></form>

    <!-- use capture mode when adding the event listener -->
    <!-- i.e. an event targeting an inner element is handled here before being handled by that element -->
    <div v-on:click.capture="doThis">...</div>

    <!-- only trigger handler if event.target is the element itself -->
    <!-- i.e. not from a child element -->
    <div v-on:click.self="doThat">...</div>

*** to select option fomr list ***
    <select v-model="selectedCity">
        <option value=""></option>
        <option v-for="city in cities" :key="city" :value="city">{{city}}</option>
    </select>

*** computed ***
    ar vm = new Vue({
    el: '#example',
    data: {
        message: 'Hello'
    },
    computed: {
        // a computed getter
        reversedMessage: function () {
        // `this` points to the vm instance
        return this.message.split('').reverse().join('')
        }
    }
    }

*** Watch ***
    // watch for changes on certain peroperty and do something
    new Vue({
        data: {
            firstName: 'John',
            lastName: 'Doe',
            completeName: 'John Doe'
        },
    
        watch: {
            firstName() {
                console.log( 'firstName changed' );
                this.completeName = this.firstName + ' ' + this.lastName;
            },
            lastName() {
                console.log( 'lastName changed' );
                this.completeName = this.firstName + ' ' + this.lastName;
            }
        }
    }).$mount( '#app' );

*** When to apply css ***
    <style>
        .bold {
            font-weight: bold;
        }

        .error {
            color: purple;
        }
    </style>
    </head>
    <body>
        <div id="app">
            <div
                :class="messageClasses">        
                    {{message}}
            </div>
        </div>

        <script type="module">
            import Vue from 'https://cdnjs.cloudflare.com/ajax/libs/vue/2.6.12/vue.esm.browser.min.js';

            new Vue({
                el: '#app',
                data: {
                    isBold: true,
                    isError: true,
                },
                computed: {
                    messageClasses() {
                        return {
                            /* name_of_class: condition_when_to_apply_class */
                            error: this.isError,            // if true it adds class
                            bold: this.isBold
                        };
                    }
                },
            });

*** components into global registration *** components

        <div id="app">
            <!-- kebab-cased version of components is used -->
            <!-- <app-header></app-header> -->
        </div>

        <script type="module">
            import Vue from 'https://cdnjs.cloudflare.com/ajax/libs/vue/2.6.12/vue.esm.browser.js';

            // Components - like custom HTML elements
            // reusable pieces of the UI - each instance will have its own data
            // the data property defines function that returns the data for the instance

            const brandNameComponent = {
                template: `
                    <span>
                        ABC Consulting
                    </span>
                `
            }
            
            const headerComponent = {
                // local registration of the component
                components: {
                    Brand: brandNameComponent
                },
                data() {
                    return {
                        message: 'Hello'
                    };
                },
                template: `
                    <div>
                        <brand />
                        {{message}}
                    </div>
                `
            };
            
        
            // global registration - for components that are used across an app

            Vue.component(
                'AppHeader', // AppHeader or app-header
                headerComponent
            );

            // one root instance
            new Vue({
                el: '#app',
                // Use kebab-case or CamelCase version of the component name
                template: `
                    <div id="app">
                        <AppHeader />                       
                    </div>
                `
            });

*** passing props - creating local copy to the recieved props ***

<div id="app"></div>

        <script type="module">
            import Vue from 'https://cdnjs.cloudflare.com/ajax/libs/vue/2.6.12/vue.esm.browser.min.js';

            /* props semantics: primitives are passed by value, objects / arrays are passed by reference */
            /* CAUTION: changing props is very bad practice - leads to a lot of difficult to debug bugs */
            /* If at all you want to modify received props - make a copy of it locally */
            const WeatherReportComponent = {
                props: [
                    'cityName', /* string prop */
                    'city' /* object prop */
                ],
                data() {
                    return {
                        // create a local copy of the received prop so that you can change at will
                        myCity: {
                            ...this.city,
                            lastFiveDaysRainfall: [
                                ...this.city.lastFiveDaysRainfall
                            ]
                        }
                    };
                },
                template: `
                    <div>
                        <h2>cityName: {{cityName}}</h2>
                        <h2>city.name: {{myCity.name}}</h2>
                        <div>
                            cityName: <input type="text" v-model="cityName" /> 
                        </div>
                        <div>
                            city.name: <input type="text" v-model="myCity.name" /> 
                        </div>
                    </div>
                `
            }

            /* We pass data to child components as custom attributes ("props") */
            new Vue({
                el: '#app',
                components: {
                    WeatherReportComponent, // WeatherReportComponent: WeatherReportComponent
                },
                data: {
                    selectedIndex: 0,
                    cities: [
                        {
                            name: 'Bangalore',
                            min: 25,
                            max: 38,
                            rainfall: 5,
                            lastFiveDaysRainfall: [
                                0, 5, 8, 10, 0
                            ]
                        },
                        {
                            name: 'Mumbai',
                            min: 25,
                            max: 38,
                            rainfall: 5,
                            lastFiveDaysRainfall: [
                                0, 5, 8, 10, 0
                            ]
                        }
                    ]
                },
                template: `
                    <div>
                        <ul>
                            <li v-for="city of cities">{{city.name}}</li>
                        </ul>
                        <select v-model="selectedIndex">
                            <option v-for="( city, index ) in cities" :value="index">{{city.name}}</option>
                        </select>
                        Selected index: {{selectedIndex}}
                        <WeatherReportComponent :cityName="cities[selectedIndex].name" :city="cities[selectedIndex]" />
                    </div>
                `
            });
        </script>


*** bind components in two ways ***
            new Vue({
                el: '#app',
                components: {
                    WeatherReportComponent, // WeatherReportComponent: WeatherReportComponent
                },
                data: {
                    selectedIndex: 0,
                    cities: [
                        {
                            name: 'Bangalore',
                            min: 25,
                            max: 38,
                            rainfall: 5,
                            lastFiveDaysRainfall: [
                                0, 5, 8, 10, 0
                            ]
                        },
                        {
                            name: 'Mumbai',
                            min: 30,
                            max: 40,
                            rainfall: 5,
                            lastFiveDaysRainfall: [
                                0, 5, 8, 10, 0
                            ]
                        }
                    ]
                },
                template: `
                    <div>
                        <ul>
                            <li v-for="city of cities">{{city.name}}</li>
                        </ul>
                        <select v-model="selectedIndex">
                            <option v-for="( city, index ) in cities" :value="index">{{city.name}}</option>
                        </select>
                        Selected index: {{selectedIndex}}
                        
                        <WeatherReportComponent                                 // 1) first ways
                            :name="cities[selectedIndex].name"
                            :min="cities[selectedIndex].min"
                            :max="cities[selectedIndex].max"
                            :rainfall="cities[selectedIndex].rainfall"
                            :lastFiveDaysRainfall="cities[selectedIndex].lastFiveDaysRainfall"
                        />
                      
                        <!-- take each of properties of cities[selectedIndex] and pass them down as props -->
                        <WeatherReportComponent v-bind="cities[selectedIndex]" />       // 2) second ways
                    </div>
                `
            });

*** Multiple components in one components ***
        <div id="app">
            <!-- kebab-cased version of components is used -->
            <!-- <app-header></app-header> -->
        </div>

        <script type="module">
            import Vue from 'https://cdnjs.cloudflare.com/ajax/libs/vue/2.6.12/vue.esm.browser.js';

            // Components - like custom HTML elements
            // reusable pieces of the UI - each instance will have its own data
            // the data property defines function that returns the data for the instance
            const brandNameComponent = {
                template: `
                    <span>
                        ABC Consulting
                    </span>
                `
            }
            
            const headerComponent = {
                // local registration of the component
                components: {
                    Brand: brandNameComponent
                },
                data() {
                    return {
                        message: 'Hello'
                    };
                },
                template: `
                    <div>
                        <brand />
                        {{message}}
                    </div>
                `
            };
            
            const footerComponent = {
                data() {
                    return {
                        message: '&copy; ABC Consulting'
                    };
                },
                template: `
                    <div v-html="message"></div>
                `
            };

            // global registration - for components that are used across an app
            // Vue.component(
            //     'BrandName', // AppHeader or app-header
            //     brandNameComponent
            // );

            Vue.component(
                'AppHeader', // AppHeader or app-header
                headerComponent
            );
            
            Vue.component(
                'AppFooter',
                footerComponent
            );

            // one root instance
            new Vue({   
                el: '#app',
                // Use kebab-case or CamelCase version of the component name
                template: `
                    <div id="app">
                        <AppHeader />
                       
                    </div>
                `
            });

*** calculator - using components ***
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Day21 Assignment3</title>
</head>
<body>
    <div id="app"></div>
    <script type="module">
        import Vue from 'https://cdnjs.cloudflare.com/ajax/libs/vue/2.6.12/vue.esm.browser.min.js';

        const calculator = {
            props : [
                'number1',
                'number2',
                'operator',
                'calcultedAns'
            ],
            methods : {
                onsubmitEvent(e)
                {   
                    e.preventDefault();
                    
                    let num1 = Number(this.number1);
                    let num2 = Number(this.number2);    
                    var optr = this.operator;

                    if( optr == '+'){
                        this.calcultedAns = num1 + num2
                    }
                    else if( optr == '-'){
                        this.calcultedAns = num1 - num2;
                    }
                    else if( optr == '*'){
                        this.calcultedAns = num1 * num2;
                    }
                    else if( optr == '/'){
                        this.calcultedAns = num1 / num2;
                    }

                }
            },
            template : `<div id="calc">
                            <form action="/login" @submit="onsubmitEvent(event)">
                                <label for="number1">Enter first number</label>
                                <input type="number" name="number1" v-model="number1">
                                <label for="number2">Enter second number</label>
                                <input type="number" name="number2" v-model="number2">
                                <label for="operator">Operation</label>
                                <select v-model="operator">
                                    <option key="+" value="+">+</option>
                                    <option key="-" value="-">-</option>
                                    <option key="/" value="/">/</option>
                                    <option key="*" value="*">*</option>
                                </select> 
                                <span>{{calcultedAns}}</span>
                                <button type="submit">Calculate</button>
                            </form>
                        </div>`
        };  

        new Vue({
            components : {
                calculator
            },
            template : `<div>
                <calculator />
                </div>`
        }).$mount('#app');
    </script>
</body>
</html>

